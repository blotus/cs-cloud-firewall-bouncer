package gcp

import (
	"context"
	"fmt"

	"github.com/fallard84/cs-cloud-firewall-bouncer/pkg/models"
	"github.com/sirupsen/logrus"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/compute/v1"
)

type Client struct {
	svc     GoogleComputeServiceIface
	project string
	network string
}

const providerName = "gcp"

var log *logrus.Entry

func init() {
	log = logrus.WithField("provider", providerName)
}

func (c *Client) MaxSourcesPerRule() int {
	return 256
}
func (c *Client) MaxRules() int {
	return 10
}

func getProjectIDFromCredentials() (string, error) {
	ctx := context.Background()
	credentials, error := google.FindDefaultCredentials(ctx, compute.ComputeScope)
	if error != nil {
		return "", error
	}
	if credentials.ProjectID == "" {
		log.Fatalf("Default credentials does not have a project ID associated")
	}
	return credentials.ProjectID, nil
}

func checkGCPConfig(config *models.GCPConfig) error {
	if config == nil {
		return fmt.Errorf("gcp cloud provider must be specified")
	}
	if config.ProjectID == "" {
		var err error
		config.ProjectID, err = getProjectIDFromCredentials()
		if err != nil || config.ProjectID == "" {
			return fmt.Errorf("can't get project id from credentials: %v", err)
		}
	}
	if config.Network == "" {
		return fmt.Errorf("network must be specified in gcp config")
	}
	return nil
}

// NewClient creates a new GCP client
func NewClient(config *models.GCPConfig) (*Client, error) {
	log.Infof("Creating client for GCP")
	err := checkGCPConfig(config)
	if err != nil {
		return nil, err
	}

	return &Client{
		svc:     NewGoogleComputeService(),
		project: config.ProjectID,
		network: config.Network,
	}, nil
}

func (c *Client) GetProviderName() string {
	return providerName
}

func (c *Client) GetRules(ruleNamePrefix string) ([]*models.FirewallRule, error) {
	res, err := c.svc.ListFirewallRules(c.project, ruleNamePrefix)
	if err != nil {
		log.Fatalf("Unable to list firewall rules: %v", err.Error())
	}
	var rules []*models.FirewallRule
	log.Infof("Found %v rule(s) in GCP", len(res.Items))
	for _, gcpRule := range res.Items {
		log.Infof("%s: %#v", gcpRule.Name, gcpRule.SourceRanges)
		rule := models.FirewallRule{
			Name:         gcpRule.Name,
			SourceRanges: models.ConvertSourceRangesSliceToMap(gcpRule.SourceRanges),
		}
		rules = append(rules, &rule)
	}
	return rules, nil
}

func (c *Client) CreateRule(rule *models.FirewallRule) error {
	log.Infof("Creating GCP firewall rule %v with %#v", rule.Name, rule.SourceRanges)

	denied := compute.FirewallDenied{
		IPProtocol: "all",
	}

	firewall := compute.Firewall{
		Direction:    "INGRESS",
		Denied:       []*compute.FirewallDenied{&denied},
		Network:      fmt.Sprintf("global/networks/%s", c.network),
		SourceRanges: models.ConvertSourceRangesMapToSlice(rule.SourceRanges),
		Name:         rule.Name,
		Description:  "Blocklist generated by CrowdSec Cloud Firewall Bouncer",
	}
	if err := c.svc.InsertFirewallRule(c.project, &firewall); err != nil {
		log.Fatalf("Unable to create firewall rules %v: %v", rule.Name, err.Error())
	}
	log.Infof("Create successful")
	return nil
}

func (c *Client) DeleteRule(rule *models.FirewallRule) error {
	log.Infof("Deleting GCP firewall rule %v", rule.Name)
	if err := c.svc.DeleteFirewallRule(c.project, rule.Name); err != nil {
		log.Fatalf("Unable to delete firewall rule %v: %v", rule.Name, err.Error())
	}
	log.Infof("Delete successful")
	return nil
}

func (c *Client) PatchRule(rule *models.FirewallRule) error {
	log.Infof("Patching GCP firewall rule %v with %#v", rule.Name, rule.SourceRanges)
	firewallPatchRequest := compute.Firewall{
		SourceRanges: models.ConvertSourceRangesMapToSlice(rule.SourceRanges),
	}
	if err := c.svc.PatchFirewallRule(c.project, rule.Name, &firewallPatchRequest); err != nil {
		log.Fatalf("Unable to patch firewall rule %v: %v", rule.Name, err.Error())
	}
	log.Infof("Patch successful")
	return nil
}
